---
    format_version: 1.3.0
    default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
    trigger_map:
    - push_branch: develop
      workflow: dev_entourage
    - push_branch: "*EN-*"
      workflow: dev_entourage
    - push_branch: master_pfp
      workflow: dev_pfp
    workflows:
      dev_entourage:
        steps:
        - activate-ssh-key:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone: {}
        - ruby-script:
            inputs:
            - ruby_content: |-
                PROJECT_KEY = 'EN'
                RESULT_ENV_VARIABLE = 'JIRA_ISSUE_KEYS'
    
                puts "Searching issue keys in environment variables"
    
                ISSUE_KEY_REGEXP = /#{PROJECT_KEY}-\d+/
                issue_keys = []
    
                [
                  :BITRISE_GIT_BRANCH,
                  :GIT_CLONE_COMMIT_MESSAGE_SUBJECT,
                  :GIT_CLONE_COMMIT_MESSAGE_BODY
                ].each do |var|
                  print "#{var}: "
                  value = ENV[var.to_s]
                  if value.nil?
                    puts "(not set)"
                    next
                  end
                  var_issue_keys = value.scan(ISSUE_KEY_REGEXP).uniq
                  puts var_issue_keys.inspect
                  issue_keys += var_issue_keys
                end
    
                issue_keys.uniq!
    
                puts
    
    
                puts "Issue keys found:"
                puts issue_keys.inspect
                puts
    
                if issue_keys.none?
                  puts "No issue key found, $#{RESULT_ENV_VARIABLE} has not been set."
                else
                  issue_keys = issue_keys.join('|')
                  puts "Setting $#{RESULT_ENV_VARIABLE} to '#{issue_keys}'."
                  system(
                    'envman', 'add',
                    '--key', RESULT_ENV_VARIABLE.to_s,
                    '--value', issue_keys
                  )
                end
            - gemfile_content: ''
        - cache-pull: {}
        - install-missing-android-tools: {}
        - gradle-runner:
            inputs:
            - apk_file_include_filter: ''
            - app_file_include_filter: "*.apk"
            - gradle_options: "--stacktrace"
            - gradle_task: "$GRADLE_TASK"
        - deploy-to-bitrise-io: {}
        - post-jira-comment-with-build-details:
            inputs:
            - base_url: "$JIRA_BASE_URL"
            - api_token: "$JIRA_API_TOKEN"
            - user_name: "$JIRA_USER_EMAIL"
            - issue_keys: "$JIRA_ISSUE_KEYS"
        - slack:
            inputs:
            - webhook_url: ''
            - from_username: Bitrise
            - from_username_on_error: Bitrise
            - message: |-
                New Entourage DEV android build is available: $BITRISE_BUILD_NUMBER  here:
                $BITRISE_APP_URL
            - message_on_error: 'Oups, build has failed for Entourage android... @here '
            - icon_url: ''
            - icon_url_on_error: ''
            - pretext_on_error: "*Entourage Build Failed!*"
            - pretext: "*Build Succeeded!* (Entourage dev only)"
            - fields: |
                App|${BITRISE_APP_TITLE}
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISE_TRIGGERED_WORKFLOW_ID}
                Jira|<${JIRA_BASE_URL}browse/${JIRA_ISSUE_KEYS}|${JIRA_ISSUE_KEYS}>
            - api_token: "$SLACK__BOT_API_TOKEN"
            - channel: "#androiddev"
        - cache-push: {}
        envs:
        - opts:
            is_expand: false
          GRADLE_TASK: assembleEntourageProdRelease assembleEntourageStagingRelease
      dev_pfp:
        steps:
        - activate-ssh-key:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone: {}
        - ruby-script:
            inputs:
            - ruby_content: |-
                PROJECT_KEY = 'EN'
                RESULT_ENV_VARIABLE = 'JIRA_ISSUE_KEYS'
    
                puts "Searching issue keys in environment variables"
    
                ISSUE_KEY_REGEXP = /#{PROJECT_KEY}-\d+/
                issue_keys = []
    
                [
                  :BITRISE_GIT_BRANCH,
                  :GIT_CLONE_COMMIT_MESSAGE_SUBJECT,
                  :GIT_CLONE_COMMIT_MESSAGE_BODY
                ].each do |var|
                  print "#{var}: "
                  value = ENV[var.to_s]
                  if value.nil?
                    puts "(not set)"
                    next
                  end
                  var_issue_keys = value.scan(ISSUE_KEY_REGEXP).uniq
                  puts var_issue_keys.inspect
                  issue_keys += var_issue_keys
                end
    
                issue_keys.uniq!
    
                puts
    
    
                puts "Issue keys found:"
                puts issue_keys.inspect
                puts
    
                if issue_keys.none?
                  puts "No issue key found, $#{RESULT_ENV_VARIABLE} has not been set."
                else
                  issue_keys = issue_keys.join('|')
                  puts "Setting $#{RESULT_ENV_VARIABLE} to '#{issue_keys}'."
                  system(
                    'envman', 'add',
                    '--key', RESULT_ENV_VARIABLE.to_s,
                    '--value', issue_keys
                  )
                end
            - gemfile_content: ''
        - cache-pull: {}
        - install-missing-android-tools: {}
        - gradle-runner:
            inputs:
            - apk_file_include_filter: ''
            - app_file_include_filter: "*.apk"
            - gradle_task: "$GRADLE_TASK"
        - deploy-to-bitrise-io: {}
        - post-jira-comment-with-build-details:
            inputs:
            - base_url: "$JIRA_BASE_URL"
            - api_token: "$JIRA_API_TOKEN"
            - user_name: "$JIRA_USER_EMAIL"
            - issue_keys: "$JIRA_ISSUE_KEYS"
        - slack:
            inputs:
            - webhook_url: ''
            - from_username: Bitrise
            - from_username_on_error: Bitrise
            - message: |-
                New PFP DEV android build is available: $BITRISE_BUILD_NUMBER  here:
                $BITRISE_APP_URL
            - message_on_error: 'Oups, build has failed for PFP android... @here '
            - icon_url: ''
            - icon_url_on_error: ''
            - pretext_on_error: "*PFP : Build Failed!*"
            - pretext: "*Build Succeeded!* (PFP dev only)"
            - fields: |
                App|${BITRISE_APP_TITLE}
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISE_TRIGGERED_WORKFLOW_ID}
                Jira|<${JIRA_BASE_URL}browse/${JIRA_ISSUE_KEYS}|${JIRA_ISSUE_KEYS}>
            - api_token: "$SLACK__BOT_API_TOKEN"
            - channel: "#androiddev"
        - cache-push: {}
        envs:
        - opts:
            is_expand: false
          GRADLE_TASK: assemblePfpProdRelease assemblePfpStagingRelease
      develop:
        steps:
        - trigger-bitrise-workflow:
            inputs:
            - workflow_id: dev_entourage
            - api_token: "$BUILD_TRIGGER"
        - trigger-bitrise-workflow:
            inputs:
            - workflow_id: dev_pfp
            - api_token: "$BUILD_TRIGGER"
      prod_entourage_tag:
        steps:
        - activate-ssh-key:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone: {}
        - git-tag@1:
            inputs:
            - tag_message: "Push to GooglePlay: $BITRISE_APP_TITLE from this branch: $BITRISE_GIT_BRANCH
                \nBuild number : $BITRISE_BUILD_NUMBER"
            - tag: BitrisePush_$BITRISE_BUILD_NUMBER
      prod_entourage:
        steps:
        - activate-ssh-key:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone: {}
        - install-missing-android-tools: {}
        - gradle-runner:
            inputs:
            - apk_file_include_filter: ''
            - app_file_include_filter: "*.aab"
            - app_file_exclude_filter: |
                *.apk
                *intermediary_bundle*.aab
            - mapping_file_include_filter: ''
            - gradle_options: "--stacktrace"
            - gradle_task: "$GRADLE_TASK"
        - deploy-to-bitrise-io: {}
        - google-play-deploy:
            inputs:
            - package_name: "$PLAYSTORE_APP_NAME"
            - app_path: "$BITRISE_AAB_PATH"
            - service_account_json_key_path: "$BITRISEIO_BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL_URL"
        - slack:
            inputs:
            - from_username: Bitrise
            - from_username_on_error: Bitrise
            - message: |-
                New PROD android build is available: $BITRISE_BUILD_NUMBER  here:
                $BITRISE_APP_URL
            - message_on_error: Oups, production build has failed for android... @here
            - icon_url: ''
            - icon_url_on_error: ''
            - pretext_on_error: "*Build Failed!"
            - pretext: Build Succeeded for ENTOURAGE! (*production only*)
            - fields: |
                App|${BITRISE_APP_TITLE}
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISE_TRIGGERED_WORKFLOW_ID}
            - api_token: "$SLACK__BOT_API_TOKEN"
            - buttons: 'View App|${BITRISE_APP_URL}
    
    '
            - channel: "#androiddev"
        - git-tag@1:
            inputs:
            - tag_message: "Push to GooglePlay: $BITRISE_APP_TITLE from this branch: $BITRISE_GIT_BRANCH
                \nBuild number : $BITRISE_BUILD_NUMBER"
            - tag: BitrisePush_$BITRISE_BUILD_NUMBER
        envs:
        - opts:
            is_expand: false
          GRADLE_TASK: bundleEntourageProdRelease
        - opts:
            is_expand: false
          PLAYSTORE_APP_NAME: social.entourage.android
      prod_pfp:
        steps:
        - activate-ssh-key:
            run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
        - git-clone: {}
        - install-missing-android-tools: {}
        - gradle-runner:
            inputs:
            - apk_file_include_filter: ''
            - app_file_include_filter: "*.aab"
            - app_file_exclude_filter: |
                *.apk
                *intermediary_bundle*.aab
            - mapping_file_include_filter: ''
            - gradle_options: "--stacktrace"
            - gradle_task: "$GRADLE_TASK"
        - deploy-to-bitrise-io: {}
        - google-play-deploy:
            inputs:
            - package_name: "$PLAYSTORE_APP_NAME"
            - app_path: "$BITRISE_AAB_PATH"
            - service_account_json_key_path: "$BITRISEIO_BITRISEIO_SERVICE_ACCOUNT_JSON_KEY_URL_URL"
        - slack:
            inputs:
            - from_username: Bitrise
            - from_username_on_error: Bitrise
            - message: |-
                New PROD android build is available: $BITRISE_BUILD_NUMBER  here:
                $BITRISE_APP_URL
            - message_on_error: Oups, production build has failed for android... @here
            - icon_url: ''
            - icon_url_on_error: ''
            - pretext_on_error: "*Build Failed!"
            - pretext: Build Succeeded for PFP! (*production only*)
            - fields: |
                App|${BITRISE_APP_TITLE}
                Branch|${BITRISE_GIT_BRANCH}
                Workflow|${BITRISE_TRIGGERED_WORKFLOW_ID}
            - api_token: "$SLACK__BOT_API_TOKEN"
            - buttons: 'View App|${BITRISE_APP_URL}
    
    '
            - channel: "#androiddev"
        envs:
        - opts:
            is_expand: false
          GRADLE_TASK: bundlePfpProdRelease
        - opts:
            is_expand: false
          APPBUNDLE_NAME: pfpapp
        - opts:
            is_expand: false
          PLAYSTORE_APP_NAME: social.entourage.android.pfp
      prod:
        steps:
        - trigger-bitrise-workflow:
            inputs:
            - workflow_id: prod_entourage
            - api_token: "$BUILD_TRIGGER"
        - trigger-bitrise-workflow:
            inputs:
            - workflow_id: prod_pfp
            - api_token: "$BUILD_TRIGGER"
    app:
      envs:
      - opts:
          is_expand: false
        GRADLE_BUILD_FILE_PATH: build.gradle
      - opts:
          is_expand: false
        GRADLE_TASK: assembleRelease
      - opts:
          is_expand: false
        GRADLEW_PATH: "./gradlew"
      - opts:
          is_expand: false
        GRADLE_TASK_TEST: 'testPreprodDebugUnitTest '
      - opts:
          is_expand: false
        GRADLE_TASK_LINT: 'lintEntourageProdRelease lintPfpProdRelease '
      - opts:
          is_expand: false
        JAVA_OPTS: "-Xms512m -Xmx2048m"
      - opts:
          is_expand: false
        GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"
    