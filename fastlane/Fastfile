# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.105.2"

default_platform :ios

platform :ios do

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to appaloosa"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    sigh(
     app_identifier: "social.entourage.entourageios.beta",
     username: "apple@entourage.social",
     adhoc: true,
     force: true
    )
    badge(
      dark: true
    )
    gym(
      clean: true,
      scheme: "EntourageBeta",
      output_directory: ENV["BITRISE_DEPLOY_DIR"]
      )
    appaloosa(
      api_token: options[:appaloosa_api_key],
      store_id: options[:appaloosa_store_id],
      screenshots: "",
      group_ids: "13446"
      )
  end

  desc "Submit a new Beta Build to appaloosa"
  desc "This will also make sure the profile is up to date"
  lane :deploy_to_TestFlight do |options|
    #cert(
    # username: "apple@entourage.social"
    #)
    sigh(
     app_identifier: "social.entourage.entourageios",
     username: "apple@entourage.social",
     adhoc: false,
     force: true
    )
    gym(
      clean: true,
      scheme: "EntourageStore"
      )
    pilot(
      skip_waiting_for_build_processing: true
      )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
